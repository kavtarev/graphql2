import { AxiosError } from 'axios';
import lodashPick = require('lodash.pick');

/* tslint:disable:max-line-length */
// Network error:
//
// { Error: getaddrinfo ENOTFOUND mel-monitoring.lan mel-monitoring.lan:8086
//     at errnoException (dns.js:50:10)
//     at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)
//   code: 'ENOTFOUND',
//   errno: 'ENOTFOUND',
//   syscall: 'getaddrinfo',
//   hostname: 'mel-monitoring.lan',
//   host: 'mel-monitoring.lan',
//   port: '8086',
//   config:
//    { adapter: [Function: httpAdapter],
//      transformRequest: { '0': [Function: transformRequest] },
//      transformResponse: { '0': [Function: transformResponse] },
//      timeout: 1000,
//      xsrfCookieName: 'XSRF-TOKEN',
//      xsrfHeaderName: 'X-XSRF-TOKEN',
//      maxContentLength: -1,
//      validateStatus: [Function: validateStatus],
//      headers:
//       { Accept: 'application/json, text/plain, */*',
//       'Content-Type': 'application/x-www-form-urlencoded',
//       'User-Agent': 'axios/0.18.0',
//       'Content-Length': 57 },
//    method: 'post',
//    url: 'http://mel-monitoring.lan:8086/write?db=mel_backend_monitoring',
//    data: 'statistics_sync_duration,host=mel.rt.lan value=0.04714806' },
// request:
//  Writable {
//    _writableState:
//     WritableState {
//       objectMode: false,
//       highWaterMark: 16384,
//       finalCalled: false,
//       needDrain: false,
//       ending: false,
//       ended: false,
//       finished: false,
//       destroyed: false,
//       decodeStrings: true,
//       defaultEncoding: 'utf8',
//       length: 0,
//       writing: false,
//       corked: 0,
//       sync: true,
//       bufferProcessing: false,
//       onwrite: [Function: bound onwrite],
//       writecb: null,
//       writelen: 0,
//       bufferedRequest: null,
//       lastBufferedRequest: null,
//       pendingcb: 0,
//       prefinished: false,
//       errorEmitted: false,
//       bufferedRequestCount: 0,
//       corkedRequestsFree: [Object] },
//    writable: true,
//    domain: null,
//      domain: null,
//      _events:
//       { response: [Function: handleResponse],
//         error: [Function: handleRequestError] },
//      _eventsCount: 2,
//      _maxListeners: undefined,
//      _options:
//       { protocol: 'http:',
//         maxRedirects: 21,
//         maxBodyLength: 10485760,
//         path: '/write?db=mel_backend_monitoring',
//         method: 'post',
//         headers: [Object],
//         agent: undefined,
//         auth: undefined,
//         hostname: 'mel-monitoring.lan',
//         port: '8086',
//         nativeProtocols: [Object],
//         pathname: '/write',
//         search: '?db=mel_backend_monitoring' },
//      _redirectCount: 0,
//      _redirects: [],
//      _requestBodyLength: 57,
//      _requestBodyBuffers: [ [Object] ],
//      _onNativeResponse: [Function],
//      _currentRequest:
//       ClientRequest {
//         domain: null,
//         _events: [Object],
//         _eventsCount: 6,
//         _maxListeners: undefined,
//         output: [],
//         outputEncodings: [],
//         outputCallbacks: [],
//         outputSize: 0,
//         writable: true,
//         _last: true,
//         upgrading: false,
//         chunkedEncoding: false,
//         shouldKeepAlive: false,
//         useChunkedEncodingByDefault: true,
//         sendDate: false,
//         _removedConnection: false,
//         _removedContLen: false,
//         _removedTE: false,
//         _contentLength: null,
//         _hasBody: true,
//         _trailer: '',
//         finished: false,
//         _headerSent: true,
//         socket: [Object],
//         connection: [Object],
//         _header: 'POST /write?db=mel_backend_monitoring HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: axios/0.18.0\r\nContent-Length: 57\r\nHost: mel-monitoring.lan:8086\r\nConnection: close\r\n\r\n',
//         _onPendingData: [Function: noopPendingOutput],
//         agent: [Object],
//         socketPath: undefined,
//         timeout: undefined,
//         method: 'POST',
//         path: '/write?db=mel_backend_monitoring',
//         _ended: false,
//         res: null,
//         aborted: undefined,
//         timeoutCb: null,
//         upgradeOrConnect: false,
//         parser: null,
//         maxHeadersCount: null,
//         _redirectable: [Circular],
//         [Symbol(outHeadersKey)]: [Object] },
//      _currentUrl: 'http://mel-monitoring.lan:8086/write?db=mel_backend_monitoring' },
//   response: undefined }
//
// HTTP error:
//
// { Error: Request failed with status code 404
//   at createError (/Users/melfa/mel-backend/book/node_modules/axios/lib/core/createError.js:16:15)
//   at settle (/Users/melfa/mel-backend/book/node_modules/axios/lib/core/settle.js:18:12)
//   at IncomingMessage.handleStreamEnd (/Users/melfa/mel-backend/book/node_modules/axios/lib/adapters/http.js:201:11)
//   at emitNone (events.js:111:20)
//   at IncomingMessage.emit (events.js:208:7)
//   at endReadableNT (_stream_readable.js:1064:12)
//   at _combinedTickCallback (internal/process/next_tick.js:138:11)
//   at process._tickCallback (internal/process/next_tick.js:180:9)
// config:
//  { adapter: [Function: httpAdapter],
//    transformRequest: { '0': [Function: transformRequest] },
//    transformResponse: { '0': [Function: transformResponse] },
//    timeout: 0,
//    xsrfCookieName: 'XSRF-TOKEN',
//    xsrfHeaderName: 'X-XSRF-TOKEN',
//    maxContentLength: -1,
//    validateStatus: [Function: validateStatus],
//    headers:
//     { Accept: 'application/json, text/plain, */*',
//       'User-Agent': 'axios/0.18.0' },
//    method: 'get',
//    url: 'http://mel.fm/qweqweqqeq',
//    data: undefined },
// request:
//  ClientRequest {
//    domain: null,
//    _events:
//     { socket: [Function],
//       abort: [Function],
//       aborted: [Function],
//       error: [Function],
//       timeout: [Function],
//       prefinish: [Function: requestOnPrefinish] },
//    _eventsCount: 6,
//    _maxListeners: undefined,
//    output: [],
//    outputEncodings: [],
//    outputCallbacks: [],
//    outputSize: 0,
//    writable: true,
//    _last: true,
//    upgrading: false,
//    chunkedEncoding: false,
//    shouldKeepAlive: false,
//    useChunkedEncodingByDefault: false,
//    sendDate: false,
//    _removedConnection: false,
//    _removedContLen: false,
//    _removedTE: false,
//    _contentLength: 0,
//    _hasBody: true,
//    _trailer: '',
//    finished: true,
//    _headerSent: true,
//    socket:
//     TLSSocket {
//       _tlsOptions: [Object],
//       _secureEstablished: true,
//       _securePending: false,
//       _newSessionPending: false,
//       _controlReleased: true,
//       _SNICallback: null,
//       servername: null,
//       npnProtocol: false,
//       alpnProtocol: false,
//       authorized: true,
//       authorizationError: null,
//       encrypted: true,
//       _events: [Object],
//       _eventsCount: 9,
//       connecting: false,
//       _hadError: false,
//       _handle: null,
//       _parent: null,
//       _host: 'mel.fm',
//       _readableState: [Object],
//       readable: false,
//       domain: null,
//       _maxListeners: undefined,
//       _writableState: [Object],
//       writable: false,
//       allowHalfOpen: false,
//       _bytesDispatched: 130,
//       _sockname: null,
//       _pendingData: null,
//       _pendingEncoding: '',
//       server: undefined,
//       _server: null,
//       ssl: null,
//       _requestCert: true,
//       _rejectUnauthorized: true,
//       parser: null,
//       _httpMessage: [Circular],
//       read: [Function],
//       _consuming: true,
//       _idleNext: null,
//       _idlePrev: null,
//       _idleTimeout: -1,
//       [Symbol(asyncId)]: 14,
//       [Symbol(bytesRead)]: 40776 },
//    connection:
//     TLSSocket {
//       _tlsOptions: [Object],
//       _secureEstablished: true,
//       _securePending: false,
//       _newSessionPending: false,
//       _controlReleased: true,
//       _SNICallback: null,
//       servername: null,
//       npnProtocol: false,
//       alpnProtocol: false,
//       authorized: true,
//       authorizationError: null,
//       encrypted: true,
//       _events: [Object],
//       _eventsCount: 9,
//       connecting: false,
//       _hadError: false,
//       _handle: null,
//       _parent: null,
//       _host: 'mel.fm',
//       _readableState: [Object],
//       readable: false,
//       domain: null,
//       _maxListeners: undefined,
//       _writableState: [Object],
//       writable: false,
//       allowHalfOpen: false,
//       _bytesDispatched: 130,
//       _sockname: null,
//       _pendingData: null,
//       _pendingEncoding: '',
//       server: undefined,
//       _server: null,
//       ssl: null,
//       _requestCert: true,
//       _rejectUnauthorized: true,
//       parser: null,
//       _httpMessage: [Circular],
//       read: [Function],
//       _consuming: true,
//       _idleNext: null,
//       _idlePrev: null,
//       _idleTimeout: -1,
//       [Symbol(asyncId)]: 14,
//       [Symbol(bytesRead)]: 40776 },
//    _header: 'GET /qweqweqqeq HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nUser-Agent: axios/0.18.0\r\nHost: mel.fm\r\nConnection: close\r\n\r\n',
//    _onPendingData: [Function: noopPendingOutput],
//    agent:
//     Agent {
//       domain: null,
//       _events: [Object],
//       _eventsCount: 1,
//       _maxListeners: undefined,
//       defaultPort: 443,
//       protocol: 'https:',
//       options: [Object],
//       requests: {},
//       sockets: [Object],
//       freeSockets: {},
//       keepAliveMsecs: 1000,
//       keepAlive: false,
//       maxSockets: Infinity,
//       maxFreeSockets: 256,
//       maxCachedSessions: 100,
//       _sessionCache: [Object] },
//    socketPath: undefined,
//    timeout: undefined,
//    method: 'GET',
//    path: '/qweqweqqeq',
//    _ended: true,
//    res:
//     IncomingMessage {
//       _readableState: [Object],
//       readable: false,
//       domain: null,
//       _events: [Object],
//       _eventsCount: 3,
//       _maxListeners: undefined,
//       socket: [Object],
//       connection: [Object],
//       httpVersionMajor: 1,
//       httpVersionMinor: 1,
//       httpVersion: '1.1',
//       complete: true,
//       headers: [Object],
//       rawHeaders: [Array],
//       trailers: {},
//       rawTrailers: [],
//       upgrade: false,
//       url: '',
//       method: null,
//       statusCode: 404,
//       statusMessage: 'Not Found',
//       client: [Object],
//       _consuming: true,
//       _dumped: false,
//       req: [Circular],
//       responseUrl: 'https://mel.fm/qweqweqqeq',
//       redirects: [],
//       read: [Function] },
//    aborted: undefined,
//    timeoutCb: null,
//    upgradeOrConnect: false,
//    parser: null,
//    maxHeadersCount: null,
//    _redirectable:
//     Writable {
//       _writableState: [Object],
//       writable: true,
//       domain: null,
//       _events: [Object],
//       _eventsCount: 2,
//       _maxListeners: undefined,
//       _options: [Object],
//       _redirectCount: 1,
//       _redirects: [],
//       _requestBodyLength: 0,
//       _requestBodyBuffers: [],
//       _onNativeResponse: [Function],
//       _currentRequest: [Circular],
//       _currentUrl: 'https://mel.fm/qweqweqqeq',
//       _isRedirect: true },
//    [Symbol(outHeadersKey)]: { accept: [Array], 'user-agent': [Array], host: [Array] } },
// response:
//  { status: 404,
//    statusText: 'Not Found',
//    headers:
//     { server: 'nginx/1.13.3',
//       date: 'Wed, 11 Jul 2018 13:55:31 GMT',
//       'content-type': 'text/html; charset=utf-8',
//       'transfer-encoding': 'chunked',
//       connection: 'close',
//       vary: 'Accept-Encoding',
//       'x-powered-by': 'Express',
//       'cache-control': 'no-cache, no-store, must-revalidate' },
//    config:
//     { adapter: [Function: httpAdapter],
//       transformRequest: [Object],
//       transformResponse: [Object],
//       timeout: 0,
//       xsrfCookieName: 'XSRF-TOKEN',
//       xsrfHeaderName: 'X-XSRF-TOKEN',
//       maxContentLength: -1,
//       validateStatus: [Function: validateStatus],
//       headers: [Object],
//       method: 'get',
//       url: 'http://mel.fm/qweqweqqeq',
//       data: undefined },
//    request:
//     ClientRequest {
//       domain: null,
//       _events: [Object],
//       _eventsCount: 6,
//       _maxListeners: undefined,
//       output: [],
//       outputEncodings: [],
//       outputCallbacks: [],
//       outputSize: 0,
//       writable: true,
//       _last: true,
//       upgrading: false,
//       chunkedEncoding: false,
//       shouldKeepAlive: false,
//       useChunkedEncodingByDefault: false,
//       sendDate: false,
//       _removedConnection: false,
//       _removedContLen: false,
//       _removedTE: false,
//       _contentLength: 0,
//       _hasBody: true,
//       _trailer: '',
//       finished: true,
//       _headerSent: true,
//       socket: [Object],
//       connection: [Object],
//       _header: 'GET /qweqweqqeq HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nUser-Agent: axios/0.18.0\r\nHost: mel.fm\r\nConnection: close\r\n\r\n',
//       _onPendingData: [Function: noopPendingOutput],
//       agent: [Object],
//       socketPath: undefined,
//       timeout: undefined,
//       method: 'GET',
//       path: '/qweqweqqeq',
//       _ended: true,
//       res: [Object],
//       aborted: undefined,
//       timeoutCb: null,
//       upgradeOrConnect: false,
//       parser: null,
//       maxHeadersCount: null,
//       _redirectable: [Object],
//       [Symbol(outHeadersKey)]: [Object] },
//    data: '<!DOCTYPE html><html class="i-layout i-layout_modifier_default i-layout_page_404"><head>...'
//   }
// }
/* tslint:enable:max-line-length */

export function formatAxiosError(axiosError: AxiosError) {
  if (!axiosError.config) {
    return axiosError;
  }

  const result: any = new Error(axiosError.message);

  for (const attr in axiosError) {
    if ('config' === attr || 'response' === attr || 'request' === attr) {
      continue;
    }
    result[attr] = (axiosError as any)[attr];
  }

  result.config = lodashPick(axiosError.config, ['method', 'url', 'data', 'headers', 'timeout']);
  if (axiosError.response) {
    result.response = lodashPick(axiosError.response, ['status', 'statusText', 'headers']);
    result.response.data = 'string' === typeof axiosError.response.data
      ? axiosError.response.data.substr(0, 500)
        + (axiosError.response.data.length > 500 ? '...' : '')
      : axiosError.response.data;
  }
  return result;
}
